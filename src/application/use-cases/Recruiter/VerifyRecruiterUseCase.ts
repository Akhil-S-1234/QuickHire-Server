import { OtpRepository } from "../../../domain/repositories/OtpRepository";
import { RecruiterRepository } from "../../../domain/repositories/RecruiterRepository";
import { Recruiter } from '../../../domain/entities/Recruiter';

export class VerifyOtpRecruiterUseCase {
    constructor(
        private otpRepository: OtpRepository,
        private recruiterRepository: RecruiterRepository
    ) {}

    async verify(otp: string, sessionRecruiterData: any): Promise<void> {
        
        const existingOtp = await this.otpRepository.findOtpByEmail(sessionRecruiterData.email);
        if (!existingOtp || existingOtp.otp !== otp) {
            throw new Error('Invalid or expired OTP');
        }

        const newRecruiter = new Recruiter(
            '', // ID will be generated by MongoDB
            sessionRecruiterData.firstName,
            sessionRecruiterData.lastName,
            sessionRecruiterData.email,
            sessionRecruiterData.mobile,
            sessionRecruiterData.currentLocation,
            sessionRecruiterData.profilePicture,
            {
                currentCompany: sessionRecruiterData.currentCompany,
                currentDesignation: sessionRecruiterData.currentDesignation,
                employmentPeriod: {
                    from: sessionRecruiterData.fromDate,
                    to: sessionRecruiterData.toDate ? sessionRecruiterData.toDate : null
                },
                companyAddress: {
                    addressLine1: sessionRecruiterData.addressLine1,
                    addressLine2: sessionRecruiterData.addressLine2,
                    city: sessionRecruiterData.city,
                    state: sessionRecruiterData.state,
                    country: sessionRecruiterData.country,
                    zipCode: sessionRecruiterData.zipCode
                }
            },
            'pending', // Set isVerified to false
            false, // Set isBlocked to false by default
            undefined,
            undefined,
            sessionRecruiterData.password,

        );

        await this.recruiterRepository.save(newRecruiter);

        console.log('Recruiter Registered');
    }
}
